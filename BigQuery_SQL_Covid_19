--Which countries have the highest CasePercentage?
SELECT location, MAX(total_cases) AS HighestInfectionCount, population, MAX((total_cases/population))*100 AS CasePercentage
FROM `deeper-sql-portfolio-project.cv19deaths.CovidDeaths`
GROUP BY location, population
order by CasePercentage DESC;

--Which countries have the highest death count per population?
SELECT location, MAX(total_deaths) AS TotalDeathCount, MAX((total_deaths/total_cases))*100 AS DeathPercentage
FROM `deeper-sql-portfolio-project.cv19deaths.CovidDeaths`
WHERE continent is NOT NULL 
GROUP BY location, population
order by DeathPercentage DESC;


--Cleaning, checking for continent vs. location...
SELECT continent, MAX(total_deaths) AS TotalDeathCount
FROM `deeper-sql-portfolio-project.cv19deaths.CovidDeaths`
WHERE continent is NOT NULL 
GROUP BY continent
order by TotalDeathCount DESC;

SELECT location, MAX(total_deaths) AS TotalDeathCount
FROM `deeper-sql-portfolio-project.cv19deaths.CovidDeaths`
WHERE continent is NULL 
GROUP BY location
order by TotalDeathCount DESC;
--Looks like income classes are included in location, will account for this.


--Continents with highest death per population (for Tableau layer/drilling)
SELECT continent, MAX(total_deaths) AS TotalDeathCount
FROM `deeper-sql-portfolio-project.cv19deaths.CovidDeaths`
WHERE continent is NOT NULL 
GROUP BY continent
order by TotalDeathCount DESC;

--GLOBAL NUMBERS

--Totals of Cases, Deaths, Death Percentage over ALL pandemic.
SELECT SUM(new_cases) AS total_cases, SUM(new_deaths) AS total_deaths, (SUM(new_deaths)/SUM(new_cases))*100 AS death_percentage
FROM `deeper-sql-portfolio-project.cv19deaths.CovidDeaths`
WHERE continent is NOT NULL
order by 1,2;


--Total Population vs. Total Vaccination
SELECT dea.continent, dea.location, dea.date, population, new_vaccinations
FROM `deeper-sql-portfolio-project.cv19deaths.CovidVaccinations` dea
JOIN `deeper-sql-portfolio-project.cv19deaths.CovidDeaths` vac
    ON dea.location = vac.location
    AND dea.date = vac.date
WHERE dea.continent is NOT NULL 
ORDER BY 2, 3;

--Adding rolling count of vaccinations to check against total vaccinations PER location/date
SELECT dea.continent, dea.location, dea.date, population, new_vaccinations, 
    SUM(new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS rolling_vaccinations
FROM `deeper-sql-portfolio-project.cv19deaths.CovidVaccinations` dea
JOIN `deeper-sql-portfolio-project.cv19deaths.CovidDeaths` vac
    ON dea.location = vac.location
    AND dea.date = vac.date
WHERE dea.continent is NOT NULL 
ORDER BY 2, 3;

--Looking to compare rolling vaccinations against population for percentage population vaccinated

WITH PopvsVac
AS
(SELECT dea.continent, dea.location, dea.date, population, new_vaccinations, 
    SUM(new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS rolling_vaccinations
FROM `deeper-sql-portfolio-project.cv19deaths.CovidVaccinations` dea
JOIN `deeper-sql-portfolio-project.cv19deaths.CovidDeaths` vac
    ON dea.location = vac.location
    AND dea.date = vac.date
WHERE dea.continent is NOT NULL 
ORDER BY 2, 3
)
SELECT *, (rolling_vaccinations/population)*100 AS VaccinationPercentage
FROM PopvsVac;


-- TEMP TABLE
DROP TABLE if exists cv19deaths.PercentPopulationVaccinated;
CREATE TABLE cv19deaths.PercentPopulationVaccinated
(
    Continent string,
    Location string,
    Date datetime,
    Population numeric,
    New_vaccinations numeric,
    Rolling_vaccinations numeric
);

INSERT INTO cv19deaths.PercentPopulationVaccinated
SELECT dea.continent, dea.location, dea.date, population, new_vaccinations, 
    SUM(new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS rolling_vaccinations
FROM `deeper-sql-portfolio-project.cv19deaths.CovidVaccinations` dea
JOIN `deeper-sql-portfolio-project.cv19deaths.CovidDeaths` vac
    ON dea.location = vac.location
    AND dea.date = vac.date
WHERE dea.continent is NOT NULL 
ORDER BY 2, 3;

SELECT *, (rolling_vaccinations/population)*100 AS VaccinationPercentage
FROM cv19deaths.PercentPopulationVaccinated;

--Creating View to store data for visualizations
CREATE View cv19deaths.PercentPopulationVaccinated as
SELECT dea.continent, dea.location, dea.date, population, new_vaccinations, 
    SUM(new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS rolling_vaccinations
FROM `deeper-sql-portfolio-project.cv19deaths.CovidVaccinations` dea
JOIN `deeper-sql-portfolio-project.cv19deaths.CovidDeaths` vac
    ON dea.location = vac.location
    AND dea.date = vac.date
WHERE dea.continent is NOT NULL 
ORDER BY 2, 3;

--Other Tableau Viz Tables

--Global Death Rate Percentage
SELECT SUM(new_cases) AS total_cases, SUM(new_deaths) AS total_deaths, (SUM(new_deaths)/SUM(new_cases))*100 AS DeathPercentage
FROM `deeper-sql-portfolio-project.cv19deaths.CovidDeaths`
WHERE continent is NOT NULL
order by 1,2;

--Total Death Count by Continent
--"location not in" clause added to clean selection for stricly continents
SELECT location, SUM(new_deaths) as TotalDeathCount
From `deeper-sql-portfolio-project.cv19deaths.CovidDeaths`
Where continent is null 
and location not in ('World', 'European Union', 'International', 'Upper middle income', 'High income', 'Lower middle income', 'Low income')
Group by location
order by TotalDeathCount desc;

--Case Totals vs. Population as CasePercentage aggregate by Location
SELECT location, MAX(total_cases) AS HighestInfectionCount, population, MAX((total_cases/population))*100 AS CasePercentage
FROM `deeper-sql-portfolio-project.cv19deaths.CovidDeaths`
WHERE continent is NOT NULL
GROUP BY location, population
order by CasePercentage DESC;

--Case Percentage by date, location.
SELECT Location, Population,date, MAX(total_cases) as HighestInfectionCount,  Max((total_cases/population))*100 as CasePercentage
FROM `deeper-sql-portfolio-project.cv19deaths.CovidDeaths`
WHERE continent is NOT NULL
GROUP BY Location, Population, date
ORDER BY CasePercentage DESC;
